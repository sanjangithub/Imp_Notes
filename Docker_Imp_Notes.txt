1. Simple difference between virtualization & containerization.

Logical separation of both os and kernel for each vm is virtualization. Each vm have their own os, memory, cpu, kernel.

Sharing of the host os & kernel for containers is called containerization. It doesn't have all the things separately for this. It'll share the host os & kernel. That's what it makes isolation easy.



2. What is a kernel?

Kernel is the heart of the cpu. It helps to communicate with the hardware like keyboard, mouse etc, Allotting CPU time for a specific tasks.




3. What is nginx & what it's used for?

Nginx is a web server which is used to run the web applications. Coming to tomcat it's a application server which will interact with the backend of the application. 

While nginx will be  interacting with the front-end like handling the incoming HTTPS requests, Load balancing, Reverse proxy, SSL & TCS data transmission, Caching for quick loading of the frequently visiting sites and Great for loading the static web pages. Not that great with the dynamic web pages. That will be done with the application server like tomcat.




4. What is an image?

The docker will package the application code & all it's dependencies into a single unit called 'Image'. This makes sharing & running of the application in another machine easier.

Terminology definition for image
---------------------------------

A docker image is a read-only Template that contains a set of instructions for creating a container that can run on the docker platform.

It provides a convenient way to package up applications and preconfigured server environments which you can use for your own private use or share publicly with other Docker users.

"A Docker image is a read-only template that contains a set of instructions for creating a self-contained, isolated container that can run on the Docker platform."




5. Docker engine
-----------------

- Docker engine is the main component for docker. With this we can create the images, creates containers for them to run the application, Manages the life cycle of the container.

- We can install this as an application. Like we install the apps like VLC video player, postman like that.



6. Docker Networking
---------------------

- There are 3 types of Virtual Network components were present in the docker. We can say them as three components.

1. Bridge
----------

The bridge driver creates an internal network within a single docker host. Containers placed within this network can communicate with each other but are isolated from containers, not on the internal network. Bridge is the default driver when running single containers or when using Docker compose.


Bridge: Provides a secure and isolated environment for containers to communicate within a specific network.



2. Host
--------

When using the host driver the container shares the network stack of the Docker host-appearing as if the container is the host itself, from a networking perspective.

Host: Provides direct access to the host machine's network, which can be convenient but also introduces potential security risks.



3. None
--------

The none driver simply disables networking for a container making it isolated from other containers.

None: Completely isolates the container from any network, which might be necessary for certain security-sensitive applications.



7. What is networking?
-----------------------

- Networking means a collection of devices which are working together. These devices will be connected using internet.



8. What is docker host?
------------------------

- A Docker Host is simply any machine (physical or virtual) that has the Docker Engine installed and running.
- It's the foundation for running Docker containers.
- Docker Host = Machine + Docker Engine
The Docker Host provides the necessary environment and resources for building, running, and managing Docker containers.



Basic commands of docker:
-------------------------

docker --version   --> To get the docker version
-----------------



docker image ls   --> To get the list of all images.
----------------



docker login   --> To login to the docker account
------------- 


docker pull  --> To clone or download the image of a product.
------------


docker create --name <custom name of the container> <image name>  --> To create a container using image name.
-------------


docker start  --> To start the container or to run.
------------


docker stop --> To stop the container.
-----------


docker run -d --name <custom name of the container> -p 8080:80 <image name> 
---------------------------------------------------------------------------   | ---> -d stands for detached mode & -p for port. Means it'll just login to the container and leaves the control to us. Else we need to give ctrl + c if there is no response. This is a combination of two commands. 1. Creation of a container & 2. Starting or running of the container.


docker run -d --name <custom name of the container> -net host <image name> or docker run -d --name <custom name of the container> -net none <image name>  
---------------------------------------------------------------------------------------------------------------------------------------------------------
|
---> This is the command to run the containers with the network specified as host or none. -p is for the port. We can declare it with -p 8080:80. And -net is for network. We can give either host or none. By default all the containers will connect to the docker0 bridge interface for bridge network connection. So no need to specify.

- If security is the concern then better go for bridge as the communication will be done securely.



docker ps  --> To get the list of running containers.
----------



docker ps -a   --> To get the list of stopped containers.
------------



docker exec -it <custom name given to the container> /bin/bash (or) docker exec -it <custom name given to the container> /sh   --> Command to login to the container. Here we can use "exit" 
-----------------------------------------------------------------------------------------------------------------------------

once we want to get out from the container.




docker kill <custom name given to the container (or) the container id generated by the docker> --> To forcefully stop the container if there is no response even after many troubleshooting
-----------------------------------------------------------------------------------------------



docker rm <custom name given to the container>  -->  To delete the container. (Note: First stop the container before going to deleting it. Else it won't get deleted.)
-----------------------------------------------



docker rmi <image name>   -->  To delete the image. i stands for image.
------------------------















